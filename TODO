New features
------------

asker.sh:# TODO: Write a real GUI program, to allow more flexibility later on
src/asker.rs:    // TODO: Write GUI, replacing current asker.sh
src/config.rs:// TODO: add some default groups (cf. https://github.com/systemd/systemd/blob/master/src/shared/seccomp-util.c#L221 )
src/config.rs:            // TODO: Handle case of syscall defined in multiple overlapping groups
src/main.rs:    /* TODO: adapt to multiple config files scenario
src/main.rs:        // TODO: Allow to answer something that will last for more than a single syscall
src/main.rs:    // TODO: load multiple config files
src/posix.rs:    // TODO: Add an Ignore target
src/posix.rs:    // TODO: allow to block environment passing?
src/posix.rs:    // TODO: Make sure forks are ptraced
src/posix.rs:        // TODO: manage multiprocess
src/seccomp.rs:    // TODO: also handle non-x64 syscalls


UI improvements
---------------

README.md:TODO: Explain it better
README.md:TODO: Write installation documentation and how to run tests
src/config.rs:        Filter::Eval(s)      => Filter::Eval(String::from(f.join(s).to_str().unwrap())), // TODO: handle error case
src/config.rs:                // TODO: Handle this cleanly
src/main.rs:    let config = vec![config::load_file(config_file).unwrap()]; // TODO: Gracefully show error
src/main.rs:    // TODO: gracefully fail
src/posix.rs:            panic!("Unable to getregs: {}", *__errno_location()); // TODO: Remove this and cleanly handle error
src/posix.rs:        // TODO: cleanly display error
src/posix.rs:            // TODO: do not panic in release builds


Testing
-------

src/config.rs:// TODO: add relevant tests
src/config.rs:// TODO: Test it
src/main.rs:// TODO: find a way to test
src/posix.rs:    // TODO: find a way to test exec
src/posix.rs:    // TODO: find a way to test ptracehim
src/posix.rs:    // TODO: Find a way to test SyscallInfo::new, syscall_info, read_str
src/posix.rs:        // TODO: This assumes /var/run is a symlink to /run, find a way to make this env-agnostic
src/seccomp.rs:    // TODO: test allowed and asking paths


Cleanup
-------

src/filter.rs:        // TODO: clean this up, it's becoming a mess


Awaiting upstream
-----------------

src/filter.rs:#[allow(unused_imports)] // Rustc seems to wrongly detect Error as unused. TODO: remove when fixed?
src/main.rs:// TODO: check things still work (or not) after switch to kernel 4.8 (cf. man 2 ptrace)
src/posix.rs:#[allow(unused_imports)] // Rustc seems to wrongly detect Error as unused. TODO: remove when fixed?
src/posix.rs:// TODO: remove when auto-derive is ready?
src/posix.rs:// TODO: Remove when auto-derive lands on stable
src/posix.rs:// TODO: replace with auto-derive when it lands on stable


Unclassified
------------

